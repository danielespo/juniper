Algorithm B
Input: A CNF formula F
Parameters: Integers max-tries, max-loops; noise parameter p ∈ [0, 1]
Output: A satisfying assignment for F, or FAIL

begin
// Color Assignment
G ← a graph of the literals in F with edges between literals that appear together in a clause
K ← the set of literals
g ← Greedy-Color(G, K) // a dictionary of literals and their assigned colors
clr ← the set of unique colors in g

// Local Search
for i ← 1 to max-tries do
σ ← a randomly generated truth assignment for F

for j ← 1 to max-loops do
if σ satisfies F then return σ // success

cc ← set of unsatisfied clauses under σ
for k in clr do // this part can be fanned out as a parallel process

ck ← clauses from cc that include at least one variable in clr
if ck empty then go to next color

C ← randomly selected clause from ck 

if ∃ variable x ∈ C with break-count = 0 & color = k then 
v ← x // freebie move

else
With probability p: // random walk move
v ← a variable in C of color = k 

With probability 1 − p: // greediest move
v ← a variable in ck of color = k with the smallest break-count
Flip v in σ

return FAIL // no satisfying assignment found
end Algorithm B 

           	 
