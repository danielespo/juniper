Algorithm A1 
Input : A CNF formula F
Parameters : Integers max-loops, max-tries; noise parameter p ∈ [0, 1]
Output : A satisfying assignment for F , or FAIL ; begin
G ← a graph of the literals in F with edges between literals that appear together in a clause
K ← the set of literals
g ← Greedy-Color(G, K) // a dictionary of literals and their assigned colors
c ← the set of unique colors in g
for i ← 1 to max-tries do
σ ← a randomly generated truth assignment for F
// no longer maxflips, but max loops over the set of colors
for j ← 1 to max-loops do 
if σ satisfies F then return σ // success

// A1 difference, select cc clauses
cc <- unsat clauses in F

// Parallel up to c colors
parallel in cc segmented by is there a variable in there of a given color: 
for v in c do
f ← clauses in F with at least one variable of the current color v
C ← an unsatisfied clause of f chosen at random
if ∃ variable x ∈ C with break-count = 0 then
v ← x // freebie move
else
With probability p: // random walk move
v ← a variable in C chosen at random
With probability 1 − p: // greedy move
v ← a variable in C with the smallest break-count
Cc_candidate_variables <- ( v, c)
Flip v in σ
return FAIL // no satisfying assignment found
end Walksat-Color 
